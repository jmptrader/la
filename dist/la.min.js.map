{"version":3,"sources":["_version.ts","EPSILON.ts","mat3.ts","la.js","vec2.ts","rect.ts"],"names":["la","la.mat3","la.mat3.create","la.mat3.copyTo","la.mat3.init","la.mat3.identity","la.mat3.equal","la.mat3.multiply","la.mat3.inverse","la.mat3.transformVec2","la.mat3.transformVec2s","la.mat3.createTranslate","la.mat3.translate","la.mat3.createScale","la.mat3.scale","la.mat3.createRotate","la.mat3.createSkew","la.mat3.preapply","la.mat3.apply","la.mat3.simple_inverse","la.mat3.complex_inverse","la.vec2","la.vec2.create","la.vec2.init","la.vec2.clone","la.vec2.reverse","la.vec2.orthogonal","la.vec2.normalize","la.vec2.rotate","la.vec2.angleBetween","la.vec2.isClockwiseTo","la.vec2.intersection","la.rect","la.rect.init","la.rect.copyTo","la.rect.transform","la.rect.equal"],"mappings":"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","file":"la.min.js","sourcesContent":["module la {\r\n    export var version = '0.1.0';\r\n}","namespace la {\r\n    export var EPSILON = 1E-6;\r\n}","namespace la.mat3 {\n    /// NOTE:\n    ///     Row-major order\n    ///     [m11, m12, m21, m22, x0, y0]\n    export function create(src?: number[]|Float32Array): Float32Array {\n        var dest = new Float32Array(6);\n\n        if (src) {\n            dest[0] = src[0];\n            dest[1] = src[1];\n            dest[2] = src[2];\n            dest[3] = src[3];\n            dest[4] = src[4];\n            dest[5] = src[5];\n        } else {\n            dest[0] = dest[1] = dest[2] = dest[3] = dest[4] = dest[5] = 0;\n        }\n\n        return dest;\n    }\n\n    export function copyTo(src: Float32Array, dest: Float32Array): Float32Array {\n        dest[0] = src[0];\n        dest[1] = src[1];\n        dest[2] = src[2];\n        dest[3] = src[3];\n        dest[4] = src[4];\n        dest[5] = src[5];\n        return dest;\n    }\n\n    export function init(dest: Float32Array, m11: number, m12: number, m21: number, m22: number, x0: number, y0: number): Float32Array {\n        dest[0] = m11;\n        dest[1] = m12;\n        dest[2] = m21;\n        dest[3] = m22;\n        dest[4] = x0;\n        dest[5] = y0;\n        return dest;\n    }\n\n    export function identity(dest?: Float32Array): Float32Array {\n        if (!dest) dest = create();\n        dest[0] = 1;\n        dest[1] = 0;\n        dest[2] = 0;\n        dest[3] = 1;\n        dest[4] = 0;\n        dest[5] = 0;\n        return dest;\n    }\n\n    export function equal(a: Float32Array, b: Float32Array): boolean {\n        return a === b || (\n                Math.abs(a[0] - b[0]) < EPSILON &&\n                Math.abs(a[1] - b[1]) < EPSILON &&\n                Math.abs(a[2] - b[2]) < EPSILON &&\n                Math.abs(a[3] - b[3]) < EPSILON &&\n                Math.abs(a[4] - b[4]) < EPSILON &&\n                Math.abs(a[5] - b[5]) < EPSILON\n            );\n    }\n\n    // dest = a * b\n    export function multiply(a: Float32Array, b: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = a;\n        var a11 = a[0], a12 = a[1],\n            a21 = a[2], a22 = a[3],\n            ax0 = a[4], ay0 = a[5],\n            b11 = b[0], b12 = b[1],\n            b21 = b[2], b22 = b[3],\n            bx0 = b[4], by0 = b[5];\n\n        dest[0] = a11 * b11 + a12 * b21;\n        dest[1] = a11 * b12 + a12 * b22;\n\n        dest[2] = a21 * b11 + a22 * b21;\n        dest[3] = a21 * b12 + a22 * b22;\n\n        dest[4] = a11 * bx0 + a12 * by0 + ax0;\n        dest[5] = a21 * bx0 + a22 * by0 + ay0;\n\n        return dest;\n    }\n\n    export function inverse(mat: Float32Array, dest?: Float32Array): Float32Array {\n        if (Math.abs(mat[1]) < EPSILON && Math.abs(mat[2]) < EPSILON) //Simple scaling/translation matrix\n            return simple_inverse(mat, dest);\n        else\n            return complex_inverse(mat, dest);\n    }\n\n    export function transformVec2(mat: Float32Array, vec: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = vec;\n        var x = vec[0],\n            y = vec[1];\n        dest[0] = (mat[0] * x) + (mat[1] * y) + mat[4];\n        dest[1] = (mat[2] * x) + (mat[3] * y) + mat[5];\n        return dest;\n    }\n\n    export function transformVec2s(mat: Float32Array, ...vecs: Float32Array[]) {\n        for (var i = vecs.length - 1; i >= 0; i--) {\n            transformVec2(mat, vecs[i]);\n        }\n    }\n\n    export function createTranslate(x: number, y: number, dest?: Float32Array): Float32Array {\n        if (!dest) dest = create();\n        dest[0] = 1;\n        dest[1] = 0;\n        dest[2] = 0;\n        dest[3] = 1;\n        dest[4] = x;\n        dest[5] = y;\n        return dest;\n    }\n\n    export function translate(mat: Float32Array, x: number, y: number): Float32Array {\n        mat[4] += x;\n        mat[5] += y;\n        return mat;\n    }\n\n    export function createScale(sx: number, sy: number, dest?: Float32Array): Float32Array {\n        if (!dest) dest = create();\n        dest[0] = sx;\n        dest[1] = 0;\n        dest[2] = 0;\n        dest[3] = sy;\n        dest[4] = 0;\n        dest[5] = 0;\n        return dest;\n    }\n\n    export function scale(mat: Float32Array, sx: number, sy: number): Float32Array {\n        mat[0] *= sx;\n        mat[2] *= sx;\n        mat[4] *= sx;\n\n        mat[1] *= sy;\n        mat[3] *= sy;\n        mat[5] *= sy;\n        return mat;\n    }\n\n    export function createRotate(angleRad: number, dest?: Float32Array): Float32Array {\n        if (!dest) dest = create();\n        var c = Math.cos(angleRad);\n        var s = Math.sin(angleRad);\n        dest[0] = c;\n        dest[1] = -s;\n        dest[2] = s;\n        dest[3] = c;\n        dest[4] = 0;\n        dest[5] = 0;\n        return dest;\n    }\n\n    export function createSkew(angleRadX: number, angleRadY: number, dest?: Float32Array): Float32Array {\n        if (!dest) dest = create();\n        dest[0] = 1;\n        dest[1] = Math.tan(angleRadX);\n        dest[2] = Math.tan(angleRadY);\n        dest[3] = 1;\n        dest[4] = 0;\n        dest[5] = 0;\n        return dest;\n    }\n\n    export function preapply(dest: Float32Array, mat: Float32Array): Float32Array {\n        return multiply(dest, mat, dest);\n    }\n\n    export function apply(dest: Float32Array, mat: Float32Array): Float32Array {\n        return multiply(mat, dest, dest);\n    }\n\n    function simple_inverse(mat: Float32Array, dest?: Float32Array): Float32Array {\n        var m11 = mat[0];\n        if (Math.abs(m11) < EPSILON)\n            return null;\n\n        var m22 = mat[3];\n        if (Math.abs(m22) < EPSILON)\n            return null;\n\n        if (!dest) {\n            dest = mat;\n        } else {\n            dest[1] = mat[1];\n            dest[2] = mat[2];\n        }\n\n        var x0 = -mat[4];\n        var y0 = -mat[5];\n        if (Math.abs(m11 - 1) > EPSILON) {\n            m11 = 1 / m11;\n            x0 *= m11;\n        }\n        if (Math.abs(m22 - 1) > EPSILON) {\n            m22 = 1 / m22;\n            y0 *= m22;\n        }\n\n        dest[0] = m11;\n        dest[3] = m22;\n        dest[4] = x0;\n        dest[5] = y0;\n        return dest;\n    }\n\n    function complex_inverse(mat: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = mat;\n\n        var m11 = mat[0], m12 = mat[1],\n            m21 = mat[2], m22 = mat[3];\n\n        //inv(A) = 1/det(A) * adj(A)\n        var det = m11 * m22 - m12 * m21;\n        if (det === 0 || !isFinite(det))\n            return null;\n        var id = 1 / det;\n\n        var x0 = mat[4], y0 = mat[5];\n\n        dest[0] = m22 * id;\n        dest[1] = -m12 * id;\n        dest[2] = -m21 * id;\n        dest[3] = m11 * id;\n        dest[4] = (m21 * y0 - m22 * x0) * id;\n        dest[5] = (m12 * x0 - m11 * y0) * id;\n        return dest;\n    }\n}","var la;\n(function (la) {\n    la.version = '0.1.0';\n})(la || (la = {}));\nvar la;\n(function (la) {\n    la.EPSILON = 1E-6;\n})(la || (la = {}));\nvar la;\n(function (la) {\n    var mat3;\n    (function (mat3) {\n        function create(src) {\n            var dest = new Float32Array(6);\n            if (src) {\n                dest[0] = src[0];\n                dest[1] = src[1];\n                dest[2] = src[2];\n                dest[3] = src[3];\n                dest[4] = src[4];\n                dest[5] = src[5];\n            }\n            else {\n                dest[0] = dest[1] = dest[2] = dest[3] = dest[4] = dest[5] = 0;\n            }\n            return dest;\n        }\n        mat3.create = create;\n        function copyTo(src, dest) {\n            dest[0] = src[0];\n            dest[1] = src[1];\n            dest[2] = src[2];\n            dest[3] = src[3];\n            dest[4] = src[4];\n            dest[5] = src[5];\n            return dest;\n        }\n        mat3.copyTo = copyTo;\n        function init(dest, m11, m12, m21, m22, x0, y0) {\n            dest[0] = m11;\n            dest[1] = m12;\n            dest[2] = m21;\n            dest[3] = m22;\n            dest[4] = x0;\n            dest[5] = y0;\n            return dest;\n        }\n        mat3.init = init;\n        function identity(dest) {\n            if (!dest)\n                dest = create();\n            dest[0] = 1;\n            dest[1] = 0;\n            dest[2] = 0;\n            dest[3] = 1;\n            dest[4] = 0;\n            dest[5] = 0;\n            return dest;\n        }\n        mat3.identity = identity;\n        function equal(a, b) {\n            return a === b || (Math.abs(a[0] - b[0]) < la.EPSILON &&\n                Math.abs(a[1] - b[1]) < la.EPSILON &&\n                Math.abs(a[2] - b[2]) < la.EPSILON &&\n                Math.abs(a[3] - b[3]) < la.EPSILON &&\n                Math.abs(a[4] - b[4]) < la.EPSILON &&\n                Math.abs(a[5] - b[5]) < la.EPSILON);\n        }\n        mat3.equal = equal;\n        function multiply(a, b, dest) {\n            if (!dest)\n                dest = a;\n            var a11 = a[0], a12 = a[1], a21 = a[2], a22 = a[3], ax0 = a[4], ay0 = a[5], b11 = b[0], b12 = b[1], b21 = b[2], b22 = b[3], bx0 = b[4], by0 = b[5];\n            dest[0] = a11 * b11 + a12 * b21;\n            dest[1] = a11 * b12 + a12 * b22;\n            dest[2] = a21 * b11 + a22 * b21;\n            dest[3] = a21 * b12 + a22 * b22;\n            dest[4] = a11 * bx0 + a12 * by0 + ax0;\n            dest[5] = a21 * bx0 + a22 * by0 + ay0;\n            return dest;\n        }\n        mat3.multiply = multiply;\n        function inverse(mat, dest) {\n            if (Math.abs(mat[1]) < la.EPSILON && Math.abs(mat[2]) < la.EPSILON)\n                return simple_inverse(mat, dest);\n            else\n                return complex_inverse(mat, dest);\n        }\n        mat3.inverse = inverse;\n        function transformVec2(mat, vec, dest) {\n            if (!dest)\n                dest = vec;\n            var x = vec[0], y = vec[1];\n            dest[0] = (mat[0] * x) + (mat[1] * y) + mat[4];\n            dest[1] = (mat[2] * x) + (mat[3] * y) + mat[5];\n            return dest;\n        }\n        mat3.transformVec2 = transformVec2;\n        function transformVec2s(mat) {\n            var vecs = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                vecs[_i - 1] = arguments[_i];\n            }\n            for (var i = vecs.length - 1; i >= 0; i--) {\n                transformVec2(mat, vecs[i]);\n            }\n        }\n        mat3.transformVec2s = transformVec2s;\n        function createTranslate(x, y, dest) {\n            if (!dest)\n                dest = create();\n            dest[0] = 1;\n            dest[1] = 0;\n            dest[2] = 0;\n            dest[3] = 1;\n            dest[4] = x;\n            dest[5] = y;\n            return dest;\n        }\n        mat3.createTranslate = createTranslate;\n        function translate(mat, x, y) {\n            mat[4] += x;\n            mat[5] += y;\n            return mat;\n        }\n        mat3.translate = translate;\n        function createScale(sx, sy, dest) {\n            if (!dest)\n                dest = create();\n            dest[0] = sx;\n            dest[1] = 0;\n            dest[2] = 0;\n            dest[3] = sy;\n            dest[4] = 0;\n            dest[5] = 0;\n            return dest;\n        }\n        mat3.createScale = createScale;\n        function scale(mat, sx, sy) {\n            mat[0] *= sx;\n            mat[2] *= sx;\n            mat[4] *= sx;\n            mat[1] *= sy;\n            mat[3] *= sy;\n            mat[5] *= sy;\n            return mat;\n        }\n        mat3.scale = scale;\n        function createRotate(angleRad, dest) {\n            if (!dest)\n                dest = create();\n            var c = Math.cos(angleRad);\n            var s = Math.sin(angleRad);\n            dest[0] = c;\n            dest[1] = -s;\n            dest[2] = s;\n            dest[3] = c;\n            dest[4] = 0;\n            dest[5] = 0;\n            return dest;\n        }\n        mat3.createRotate = createRotate;\n        function createSkew(angleRadX, angleRadY, dest) {\n            if (!dest)\n                dest = create();\n            dest[0] = 1;\n            dest[1] = Math.tan(angleRadX);\n            dest[2] = Math.tan(angleRadY);\n            dest[3] = 1;\n            dest[4] = 0;\n            dest[5] = 0;\n            return dest;\n        }\n        mat3.createSkew = createSkew;\n        function preapply(dest, mat) {\n            return multiply(dest, mat, dest);\n        }\n        mat3.preapply = preapply;\n        function apply(dest, mat) {\n            return multiply(mat, dest, dest);\n        }\n        mat3.apply = apply;\n        function simple_inverse(mat, dest) {\n            var m11 = mat[0];\n            if (Math.abs(m11) < la.EPSILON)\n                return null;\n            var m22 = mat[3];\n            if (Math.abs(m22) < la.EPSILON)\n                return null;\n            if (!dest) {\n                dest = mat;\n            }\n            else {\n                dest[1] = mat[1];\n                dest[2] = mat[2];\n            }\n            var x0 = -mat[4];\n            var y0 = -mat[5];\n            if (Math.abs(m11 - 1) > la.EPSILON) {\n                m11 = 1 / m11;\n                x0 *= m11;\n            }\n            if (Math.abs(m22 - 1) > la.EPSILON) {\n                m22 = 1 / m22;\n                y0 *= m22;\n            }\n            dest[0] = m11;\n            dest[3] = m22;\n            dest[4] = x0;\n            dest[5] = y0;\n            return dest;\n        }\n        function complex_inverse(mat, dest) {\n            if (!dest)\n                dest = mat;\n            var m11 = mat[0], m12 = mat[1], m21 = mat[2], m22 = mat[3];\n            var det = m11 * m22 - m12 * m21;\n            if (det === 0 || !isFinite(det))\n                return null;\n            var id = 1 / det;\n            var x0 = mat[4], y0 = mat[5];\n            dest[0] = m22 * id;\n            dest[1] = -m12 * id;\n            dest[2] = -m21 * id;\n            dest[3] = m11 * id;\n            dest[4] = (m21 * y0 - m22 * x0) * id;\n            dest[5] = (m12 * x0 - m11 * y0) * id;\n            return dest;\n        }\n    })(mat3 = la.mat3 || (la.mat3 = {}));\n})(la || (la = {}));\nvar la;\n(function (la) {\n    var vec2;\n    (function (vec2) {\n        function create(x, y) {\n            var dest = new Float32Array(2);\n            dest[0] = x;\n            dest[1] = y;\n            return dest;\n        }\n        vec2.create = create;\n        function init(x, y, dest) {\n            if (!dest)\n                dest = new Float32Array(2);\n            dest[0] = x;\n            dest[1] = y;\n            return dest;\n        }\n        vec2.init = init;\n        function clone(src, dest) {\n            return init(src[0], src[1], dest);\n        }\n        vec2.clone = clone;\n        function reverse(src, dest) {\n            if (!dest)\n                dest = src;\n            dest[0] = -src[0];\n            dest[1] = -src[1];\n            return dest;\n        }\n        vec2.reverse = reverse;\n        function orthogonal(src, dest) {\n            if (!dest)\n                dest = src;\n            var x = src[0], y = src[1];\n            dest[0] = -y;\n            dest[1] = x;\n            return dest;\n        }\n        vec2.orthogonal = orthogonal;\n        function normalize(src, dest) {\n            if (!dest)\n                dest = src;\n            var x = src[0], y = src[1];\n            var len = Math.sqrt(x * x + y * y);\n            dest[0] = x / len;\n            dest[1] = y / len;\n            return dest;\n        }\n        vec2.normalize = normalize;\n        function rotate(src, theta, dest) {\n            if (!dest)\n                dest = src;\n            var c = Math.cos(theta);\n            var s = Math.sin(theta);\n            var x = src[0];\n            var y = src[1];\n            dest[0] = x * c - y * s;\n            dest[1] = x * s + y * c;\n            return dest;\n        }\n        vec2.rotate = rotate;\n        function angleBetween(u, v) {\n            var ux = u[0], uy = u[1], vx = v[0], vy = v[1];\n            var num = ux * vx + uy * vy;\n            var den = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n            return Math.acos(num / den);\n        }\n        vec2.angleBetween = angleBetween;\n        function isClockwiseTo(v1, v2) {\n            var theta = angleBetween(v1, v2);\n            var nv1 = normalize(clone(v1));\n            var nv2 = normalize(clone(v2));\n            rotate(nv1, theta);\n            var nx = Math.abs(nv1[0] - nv2[0]);\n            var ny = Math.abs(nv1[1] - nv2[1]);\n            return nx < la.EPSILON\n                && ny < la.EPSILON;\n        }\n        vec2.isClockwiseTo = isClockwiseTo;\n        function intersection(s1, d1, s2, d2) {\n            var x1 = s1[0];\n            var y1 = s1[1];\n            var x2 = x1 + d1[0];\n            var y2 = y1 + d1[1];\n            var x3 = s2[0];\n            var y3 = s2[1];\n            var x4 = x3 + d2[0];\n            var y4 = y3 + d2[1];\n            var det = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n            if (det === 0)\n                return null;\n            var xn = ((x1 * y2 - y1 * x2) * (x3 - x4)) - ((x1 - x2) * (x3 * y4 - y3 * x4));\n            var yn = ((x1 * y2 - y1 * x2) * (y3 - y4)) - ((y1 - y2) * (x3 * y4 - y3 * x4));\n            return vec2.create(xn / det, yn / det);\n        }\n        vec2.intersection = intersection;\n    })(vec2 = la.vec2 || (la.vec2 = {}));\n})(la || (la = {}));\nvar la;\n(function (la) {\n    var rect;\n    (function (rect) {\n        function init(x, y, width, height, dest) {\n            if (!dest)\n                return { x: x, y: y, width: width, height: height };\n            dest.x = x;\n            dest.y = y;\n            dest.width = width;\n            dest.height = height;\n            return dest;\n        }\n        rect.init = init;\n        function copyTo(src, dest) {\n            if (!dest) {\n                return {\n                    x: src.x,\n                    y: src.y,\n                    width: src.width,\n                    height: src.height\n                };\n            }\n            else {\n                dest.x = src.x;\n                dest.y = src.y;\n                dest.width = src.width;\n                dest.height = src.height;\n                return dest;\n            }\n        }\n        rect.copyTo = copyTo;\n        var p1 = la.vec2.create(0, 0);\n        var p2 = la.vec2.create(0, 0);\n        var p3 = la.vec2.create(0, 0);\n        var p4 = la.vec2.create(0, 0);\n        function transform(src, transform, dest) {\n            if (!transform)\n                return dest;\n            if (!dest)\n                dest = { x: 0, y: 0, width: 0, height: 0 };\n            var x = src.x;\n            var y = src.y;\n            var w = src.width;\n            var h = src.height;\n            la.vec2.init(x, y, p1);\n            la.vec2.init(x + w, y, p2);\n            la.vec2.init(x + w, y + h, p3);\n            la.vec2.init(x, y + h, p4);\n            la.mat3.transformVec2(transform, p1);\n            la.mat3.transformVec2(transform, p2);\n            la.mat3.transformVec2(transform, p3);\n            la.mat3.transformVec2(transform, p4);\n            var l = Math.min(p1[0], p2[0], p3[0], p4[0]);\n            var t = Math.min(p1[1], p2[1], p3[1], p4[1]);\n            var r = Math.max(p1[0], p2[0], p3[0], p4[0]);\n            var b = Math.max(p1[1], p2[1], p3[1], p4[1]);\n            dest.x = l;\n            dest.y = t;\n            dest.width = r - l;\n            dest.height = b - t;\n            return dest;\n        }\n        rect.transform = transform;\n        function equal(r1, r2) {\n            return r1.x === r2.x\n                && r1.y === r2.y\n                && r1.width === r2.width\n                && r1.height === r2.height;\n        }\n        rect.equal = equal;\n    })(rect = la.rect || (la.rect = {}));\n})(la || (la = {}));\n","namespace la.vec2 {\n    export function create(x: number, y: number): Float32Array {\n        var dest = new Float32Array(2);\n        dest[0] = x;\n        dest[1] = y;\n        return dest;\n    }\n\n    export function init(x: number, y: number, dest?: Float32Array): Float32Array {\n        if (!dest) dest = new Float32Array(2);\n        dest[0] = x;\n        dest[1] = y;\n        return dest;\n    }\n\n    export function clone(src: Float32Array, dest?: Float32Array): Float32Array {\n        return init(src[0], src[1], dest);\n    }\n\n    export function reverse(src: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = src;\n        dest[0] = -src[0];\n        dest[1] = -src[1];\n        return dest;\n    }\n\n    /// Equivalent of rotating 90 degrees clockwise (screen space)\n    export function orthogonal(src: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = src;\n        var x = src[0],\n            y = src[1];\n        dest[0] = -y;\n        dest[1] = x;\n        return dest;\n    }\n\n    export function normalize(src: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = src;\n        var x = src[0],\n            y = src[1];\n        var len = Math.sqrt(x * x + y * y);\n        dest[0] = x / len;\n        dest[1] = y / len;\n        return dest;\n    }\n\n    /// Rotates a vector(v) by angle(theta) clockwise(screen space) ...which is counter-clockwise in coordinate space\n    export function rotate(src: Float32Array, theta: number, dest?: Float32Array): Float32Array {\n        if (!dest) dest = src;\n        var c = Math.cos(theta);\n        var s = Math.sin(theta);\n        var x = src[0];\n        var y = src[1];\n        dest[0] = x * c - y * s;\n        dest[1] = x * s + y * c;\n        return dest;\n    }\n\n    /// Returns smallest angle (in radians) between 2 vectors\n    export function angleBetween(u: Float32Array, v: Float32Array): number {\n        var ux = u[0],\n            uy = u[1],\n            vx = v[0],\n            vy = v[1];\n        var num = ux * vx + uy * vy;\n        var den = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n        return Math.acos(num / den);\n    }\n\n    /// By rotating from vector(v1) to vector(v2), tests whether that angle is clockwise (screen space)\n    export function isClockwiseTo(v1: Float32Array, v2: Float32Array): boolean {\n        var theta = angleBetween(v1, v2);\n        var nv1 = normalize(clone(v1));\n        var nv2 = normalize(clone(v2));\n        rotate(nv1, theta);\n        var nx = Math.abs(nv1[0] - nv2[0]);\n        var ny = Math.abs(nv1[1] - nv2[1]);\n        return nx < EPSILON\n            && ny < EPSILON;\n    }\n\n    /// Finds intersection of v1(s1 + t(d1)) and v2(s2 + t(d2))\n    export function intersection(s1: Float32Array, d1: Float32Array, s2: Float32Array, d2: Float32Array): Float32Array {\n        var x1 = s1[0];\n        var y1 = s1[1];\n        var x2 = x1 + d1[0];\n        var y2 = y1 + d1[1];\n\n        var x3 = s2[0];\n        var y3 = s2[1];\n        var x4 = x3 + d2[0];\n        var y4 = y3 + d2[1];\n\n        var det = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n        if (det === 0)\n            return null;\n\n        var xn = ((x1 * y2 - y1 * x2) * (x3 - x4)) - ((x1 - x2) * (x3 * y4 - y3 * x4));\n        var yn = ((x1 * y2 - y1 * x2) * (y3 - y4)) - ((y1 - y2) * (x3 * y4 - y3 * x4));\n        return vec2.create(xn / det, yn / det);\n    }\n}","/// <reference path=\"vec2\" />\r\n\r\nnamespace la.rect {\r\n    export function init(x: number, y: number, width: number, height: number, dest?: IRect): IRect {\r\n        if (!dest)\r\n            return {x: x, y: y, width: width, height: height};\r\n        dest.x = x;\r\n        dest.y = y;\r\n        dest.width = width;\r\n        dest.height = height;\r\n        return dest;\r\n    }\r\n\r\n    export function copyTo(src: IRect, dest?: IRect): IRect {\r\n        if (!dest) {\r\n            return {\r\n                x: src.x,\r\n                y: src.y,\r\n                width: src.width,\r\n                height: src.height\r\n            };\r\n        } else {\r\n            dest.x = src.x;\r\n            dest.y = src.y;\r\n            dest.width = src.width;\r\n            dest.height = src.height;\r\n            return dest;\r\n        }\r\n    }\r\n\r\n    var p1 = vec2.create(0, 0);\r\n    var p2 = vec2.create(0, 0);\r\n    var p3 = vec2.create(0, 0);\r\n    var p4 = vec2.create(0, 0);\r\n\r\n    export function transform(src: IRect, transform: Float32Array, dest?: IRect): IRect {\r\n        if (!transform)\r\n            return dest;\r\n        if (!dest)\r\n            dest = <IRect>{x: 0, y: 0, width: 0, height: 0};\r\n\r\n        var x = src.x;\r\n        var y = src.y;\r\n        var w = src.width;\r\n        var h = src.height;\r\n\r\n        vec2.init(x, y, p1);\r\n        vec2.init(x + w, y, p2);\r\n        vec2.init(x + w, y + h, p3);\r\n        vec2.init(x, y + h, p4);\r\n\r\n        mat3.transformVec2(transform, p1);\r\n        mat3.transformVec2(transform, p2);\r\n        mat3.transformVec2(transform, p3);\r\n        mat3.transformVec2(transform, p4);\r\n\r\n        var l = Math.min(p1[0], p2[0], p3[0], p4[0]);\r\n        var t = Math.min(p1[1], p2[1], p3[1], p4[1]);\r\n        var r = Math.max(p1[0], p2[0], p3[0], p4[0]);\r\n        var b = Math.max(p1[1], p2[1], p3[1], p4[1]);\r\n\r\n        dest.x = l;\r\n        dest.y = t;\r\n        dest.width = r - l;\r\n        dest.height = b - t;\r\n        return dest;\r\n    }\r\n\r\n    export function equal(r1: IRect, r2: IRect): boolean {\r\n        return r1.x === r2.x\r\n            && r1.y === r2.y\r\n            && r1.width === r2.width\r\n            && r1.height === r2.height;\r\n    }\r\n}"],"sourceRoot":"/source/"}